blueprint:
  domain: automation
  name: go-e MQTT & Solar Power PV/EV Loadbalancing
  description: The integration of Solar Power and go-e MQTT enables dynamic balancing
    of photovoltaic (PV) load into your EV.
  source_url: https://github.com/woopstar/goe_solar_pv_loadbalacer/blob/main/goe_solar_pv_loadbalacer.yaml
  input:
    iTimeStart:
      name: Automation Activation Time
      description: 'Set the time you want the load balancing to activate. This is important to avoid low charging currents during nighttime.'
      default: 08:00:00
      selector:
        time: {}
    iTimeEnd:
      name: Automation Deactivation Time
      description: 'Set the time you want the load balancing to deactivate. This is important to avoid low charging currents during nighttime.'
      default: '22:00:00'
      selector:
        time: {}
    iMinimumCurrent:
      name: Minimum current for charging
      description: "By default: 6A"
      selector:
        number:
          min: 0
          max: 32
          step: 1
          unit_of_measurement: 'A'
          mode: slider
      default: 6
    iMaximumCurrent:
      name: Maximum current for charging
      description: "By default: 16A"
      selector:
        number:
          min: 0
          max: 32
          step: 1
          unit_of_measurement: 'A'
          mode: slider
      default: 16
    iThreePhaseSwitchLevel:
      name: Phase switch level
      description: 'Amount of power that needs to be free before we switch between one or three phase charging. By default: 4200W'
      selector:
        number:
          min: 0
          max: 7000
          step: 1
          unit_of_measurement: 'W'
          mode: slider
      default: 4200
    iMeanPowerAvailableForCharging:
      name: Solar Power Available For Charging
      description: 'Sensor that indicates the amount of available free power to charge the EV/PV by. By default: sensor.mean_solar_power_available_for_charging_over_2_min'
      selector:
        entity:
          domain: sensor
          device_class: power
          multiple: false
      default: sensor.mean_solar_power_available_for_charging_over_2_min
    iChargerCurrent:
      name: go-E - Requested current
      description: 'Requested current to be set from calculations on the charger. By default: number.go_echarger_222819_amp'
      selector:
        entity:
          domain: number
          device_class: number
          multiple: false
      default: number.go_echarger_222819_amp
    iForceSinglePhase:
      name: go-E - Force single phase
      description: 'Switch to shift between one or three phase charging. By default: switch.go_echarger_222819_psm'
      selector:
        entity:
          domain: switch
          multiple: false
      default: switch.go_echarger_222819_psm
    iCarConnected:
      name: go-E - Car Connected
      description: 'Switch to determine if car is plugged in or not to charger. By default: binary_sensor.go_echarger_222819_car'
      selector:
        entity:
          domain: binary_sensor
          multiple: false
      default: binary_sensor.go_echarger_222819_car
    iAllowCharging:
      name: go-E - Switch to allow charging
      description: 'Switch to turn charging on and off. By default: switch.go_echarger_222819_allow_charging'
      selector:
        entity:
          domain: switch
          multiple: false
      default: switch.go_echarger_222819_allow_charging

# Trigger automation when power available changes
trigger:
- platform: state
  entity_id:
  - !input iMeanPowerAvailableForCharging

condition:
- condition: time
  after: !input iTimeStart
  before: !input iTimeEnd

- condition: numeric_state
  entity_id: sun.sun
  above: 7
  attribute: elevation

- condition: state
  state: "on"
  entity_id:
  - !input iCarConnected

action:
# Switch between one or three phase
- if:
    - condition: template
      value_template: "{{ valPowerAvailable | float(0) < entThreePhaseSwitchLevel | int }}"
  then:
    - service: switch.turn_on
      target:
        entity_id:
        - !input iForceSinglePhase
  else:
    - service: switch.turn_off
      target:
        entity_id:
        - !input iForceSinglePhase

# Set charger current based on calculations.
- if:
    - condition: template
      value_template: "{{ valCurrentAvailableForCharging | int >= entMinimumCurrent | int }}"
  then:
    - service: number.set_value
      data:
        value: '{{ valCurrentAvailableForCharging | int }}'
      target:
        entity_id:
        - !input iChargerCurrent
  else:
    - service: number.set_value
      data:
        value: '{{ entMinimumCurrent | int }}'
      target:
        entity_id:
        - !input iChargerCurrent

# Turn charger on or off based on current
- if:
    - condition: template
      value_template: "{{ valCurrentAvailableForCharging | int >= entMinimumCurrent | int }}"
  then:
    - service: switch.turn_on
      target:
        entity_id:
        - !input iAllowCharging
  else:
    - service: switch.turn_off
      target:
        entity_id:
        - !input iAllowCharging

variables:
  entMinimumCurrent: !input iMinimumCurrent
  entMaximumCurrent: !input iMaximumCurrent
  entThreePhaseSwitchLevel: !input iThreePhaseSwitchLevel
  entMeanPowerAvailableForCharging: !input iMeanPowerAvailableForCharging
  entChargerCurrent: !input iChargerCurrent
  entAllowCharging: !input iAllowCharging
  valPowerAvailable: '{{ states(entMeanPowerAvailableForCharging) }}'
  valPhases: '{{ 3 if valPowerAvailable | float(1) > entThreePhaseSwitchLevel | int else 1 }}'
  valChargerVoltage: "{{ 230 * valPhases | int }}"
  valAvailableCurrent: '{{ ( valPowerAvailable | float(1) / valChargerVoltage | int ) | float }}'
  valCurrentAvailableForCharging: '
    {% set AvailableCurrent = valAvailableCurrent %}
    {% if AvailableCurrent < entMinimumCurrent | int %}
      {% set AvailableCurrent = 0 %}
    {% elif AvailableCurrent > entMaximumCurrent | int %}
      {% set AvailableCurrent = entMaximumCurrent | int %}
    {% endif %}
    {{ AvailableCurrent | default(0) | int }}
  '

mode: restart
max_exceeded: silent
